[[plugins]]
repo             = 'kana/vim-submode'
on_event         = 'BufNewFile'
hook_port_source = '''
  call submode#enter_with('bufmove', 'n', '', 's>', '<C-w>>')
  call submode#enter_with('bufmove', 'n', '', 's<', '<C-w><')
  call submode#enter_with('bufmove', 'n', '', 's+', '<C-w>+')
  call submode#enter_with('bufmove', 'n', '', 's-', '<C-w>-')
  call submode#map('bufmove', 'n', '', '>', '<C-w>>')
  call submode#map('bufmove', 'n', '', '<', '<C-w><')
  call submode#map('bufmove', 'n', '', '+', '<C-w>+')
  call submode#map('bufmove', 'n', '', '-', '<C-w>-')
'''

# vim起動中に実行
[[plugins]]
repo  = 'thinca/vim-quickrun'
on_ft = ["ruby", "python", "perl"]

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo      = 'Shougo/neosnippet.vim'
depends   = ['context_filetype.vim', 'neosnippet-snippets']
on_event  = 'InsertCharPre'
hook_post_source = '''
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#enable_completed_snippet      = 1
let g:neosnippet#expand_word_boundary          = 1
'''

#入力補助
[[plugins]]
repo      = 'kana/vim-smartinput'
on_event  = 'InsertCharPre'
hook_post_source = '''
call smartinput#map_to_trigger('i', '<Space>', '<Space>', '<Space>')
call smartinput#define_rule({
\   'at'    : '(\%#)',
\   'char'  : '<Space>',
\   'input' : '<Space><Space><Left>',
\   })
call smartinput#define_rule({
\   'at'    : '( \%# )',
\   'char'  : '<BS>',
\   'input' : '<Del><BS>',
\   })
call smartinput#map_to_trigger('i', '#', '#', '#')
call smartinput#define_rule({
\   'at'       : '\%#',
\   'char'     : '#',
\   'input'    : '#{}<Left>',
\   'filetype' : ['ruby'],
\   'syntax'   : ['Constant', 'Special'],
\   })
call smartinput#map_to_trigger('i', '<Bar>', '<Bar>', '<Bar>')
call smartinput#define_rule({
\   'at' : '\({\|\<do\>\)\s*\%#',
\   'char' : '<Bar>',
\   'input' : '<Bar><Bar><Left>',
\   'filetype' : ['ruby'],
\    })
call smartinput_endwise#define_default_rules()
'''

[[plugins]]
repo      = "cohama/vim-smartinput-endwise"
on_source = "vim-smartinput"


# [vue]---------------------------------------------
#Vim syntax highlighting for Vue components.
[[plugins]]
repo  = 'posva/vim-vue'
on_ft = ['vue']
hook_post_source='''
let g:ft = ''
function! NERDCommenter_before()
  if &ft == 'vue'
    let g:ft = 'vue'
    let stack = synstack(line('.'), col('.'))
    if len(stack) > 0
      let syn = synIDattr((stack)[0], 'name')
      if len(syn) > 0
        exe 'setf ' . substitute(tolower(syn), '^vue_', '', '')
      endif
    endif
  endif
endfunction
function! NERDCommenter_after()
  if g:ft == 'vue'
    setf vue
    let g:ft = ''
  endif
endfunction
'''

# [markdown]--------------------------------------
[[plugins]]
repo  = 'tpope/vim-markdown'
on_ft = ['markdown']

[[plugins]]
repo  = 'gabrielelana/vim-markdown'
on_ft = ['markdown']

# [slim]--------------------------------------
[[plugins]]
repo  = 'slim-template/vim-slim'
on_ft = ['slim']
hook_post_source='''
autocmd BufRead,BufNewFile *.slim setfiletype slim
'''

# [toml]--------------------------------------
[[plugins]]
repo  = 'cespare/vim-toml'
on_ft = ['toml']
hook_post_source='''
autocmd BufNewFile,BufRead *.toml  setlocal filetype=toml
'''


# [json]--------------------------------------
[[plugins]]
repo = 'elzr/vim-json'
hook_add = '''
let g:vim_json_syntax_conceal = 0
'''
on_ft = ['json']


# [terraform]--------------------------------------
[[plugins]]
repo = 'hashivim/vim-terraform'
on_ft = ['terraform']
hook_add = '''
let g:terraform_align=1
let g:terraform_fmt_on_save=1
autocmd BufRead,BufNewFile *.hcl set filetype=terraform
'''
